// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: proto/log.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Loggy_StreamLogs_FullMethodName = "/proto.Loggy/StreamLogs"
	Loggy_SearchLogs_FullMethodName = "/proto.Loggy/SearchLogs"
)

// LoggyClient is the client API for Loggy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggyClient interface {
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Log, EmptyResponse], error)
	SearchLogs(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type loggyClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggyClient(cc grpc.ClientConnInterface) LoggyClient {
	return &loggyClient{cc}
}

func (c *loggyClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Log, EmptyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Loggy_ServiceDesc.Streams[0], Loggy_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Log, EmptyResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Loggy_StreamLogsClient = grpc.ClientStreamingClient[Log, EmptyResponse]

func (c *loggyClient) SearchLogs(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, Loggy_SearchLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggyServer is the server API for Loggy service.
// All implementations must embed UnimplementedLoggyServer
// for forward compatibility.
type LoggyServer interface {
	StreamLogs(grpc.ClientStreamingServer[Log, EmptyResponse]) error
	SearchLogs(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedLoggyServer()
}

// UnimplementedLoggyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoggyServer struct{}

func (UnimplementedLoggyServer) StreamLogs(grpc.ClientStreamingServer[Log, EmptyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLoggyServer) SearchLogs(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLogs not implemented")
}
func (UnimplementedLoggyServer) mustEmbedUnimplementedLoggyServer() {}
func (UnimplementedLoggyServer) testEmbeddedByValue()               {}

// UnsafeLoggyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggyServer will
// result in compilation errors.
type UnsafeLoggyServer interface {
	mustEmbedUnimplementedLoggyServer()
}

func RegisterLoggyServer(s grpc.ServiceRegistrar, srv LoggyServer) {
	// If the following call pancis, it indicates UnimplementedLoggyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Loggy_ServiceDesc, srv)
}

func _Loggy_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoggyServer).StreamLogs(&grpc.GenericServerStream[Log, EmptyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Loggy_StreamLogsServer = grpc.ClientStreamingServer[Log, EmptyResponse]

func _Loggy_SearchLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggyServer).SearchLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loggy_SearchLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggyServer).SearchLogs(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Loggy_ServiceDesc is the grpc.ServiceDesc for Loggy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loggy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Loggy",
	HandlerType: (*LoggyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchLogs",
			Handler:    _Loggy_SearchLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _Loggy_StreamLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/log.proto",
}
