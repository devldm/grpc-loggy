// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: api/v1/log.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoggyService_StreamLogs_FullMethodName  = "/api.v1.LoggyService/StreamLogs"
	LoggyService_SearchLogs_FullMethodName  = "/api.v1.LoggyService/SearchLogs"
	LoggyService_GetLogCount_FullMethodName = "/api.v1.LoggyService/GetLogCount"
)

// LoggyServiceClient is the client API for LoggyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggyServiceClient interface {
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamLogsRequest, StreamLogsResponse], error)
	SearchLogs(ctx context.Context, in *SearchLogsRequest, opts ...grpc.CallOption) (*SearchLogsResponse, error)
	GetLogCount(ctx context.Context, in *GetLogCountRequest, opts ...grpc.CallOption) (*GetLogCountResponse, error)
}

type loggyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggyServiceClient(cc grpc.ClientConnInterface) LoggyServiceClient {
	return &loggyServiceClient{cc}
}

func (c *loggyServiceClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamLogsRequest, StreamLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LoggyService_ServiceDesc.Streams[0], LoggyService_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamLogsRequest, StreamLogsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LoggyService_StreamLogsClient = grpc.ClientStreamingClient[StreamLogsRequest, StreamLogsResponse]

func (c *loggyServiceClient) SearchLogs(ctx context.Context, in *SearchLogsRequest, opts ...grpc.CallOption) (*SearchLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchLogsResponse)
	err := c.cc.Invoke(ctx, LoggyService_SearchLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggyServiceClient) GetLogCount(ctx context.Context, in *GetLogCountRequest, opts ...grpc.CallOption) (*GetLogCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogCountResponse)
	err := c.cc.Invoke(ctx, LoggyService_GetLogCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggyServiceServer is the server API for LoggyService service.
// All implementations must embed UnimplementedLoggyServiceServer
// for forward compatibility.
type LoggyServiceServer interface {
	StreamLogs(grpc.ClientStreamingServer[StreamLogsRequest, StreamLogsResponse]) error
	SearchLogs(context.Context, *SearchLogsRequest) (*SearchLogsResponse, error)
	GetLogCount(context.Context, *GetLogCountRequest) (*GetLogCountResponse, error)
	mustEmbedUnimplementedLoggyServiceServer()
}

// UnimplementedLoggyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoggyServiceServer struct{}

func (UnimplementedLoggyServiceServer) StreamLogs(grpc.ClientStreamingServer[StreamLogsRequest, StreamLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLoggyServiceServer) SearchLogs(context.Context, *SearchLogsRequest) (*SearchLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLogs not implemented")
}
func (UnimplementedLoggyServiceServer) GetLogCount(context.Context, *GetLogCountRequest) (*GetLogCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogCount not implemented")
}
func (UnimplementedLoggyServiceServer) mustEmbedUnimplementedLoggyServiceServer() {}
func (UnimplementedLoggyServiceServer) testEmbeddedByValue()                      {}

// UnsafeLoggyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggyServiceServer will
// result in compilation errors.
type UnsafeLoggyServiceServer interface {
	mustEmbedUnimplementedLoggyServiceServer()
}

func RegisterLoggyServiceServer(s grpc.ServiceRegistrar, srv LoggyServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoggyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoggyService_ServiceDesc, srv)
}

func _LoggyService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LoggyServiceServer).StreamLogs(&grpc.GenericServerStream[StreamLogsRequest, StreamLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LoggyService_StreamLogsServer = grpc.ClientStreamingServer[StreamLogsRequest, StreamLogsResponse]

func _LoggyService_SearchLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggyServiceServer).SearchLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoggyService_SearchLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggyServiceServer).SearchLogs(ctx, req.(*SearchLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggyService_GetLogCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggyServiceServer).GetLogCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoggyService_GetLogCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggyServiceServer).GetLogCount(ctx, req.(*GetLogCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoggyService_ServiceDesc is the grpc.ServiceDesc for LoggyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoggyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.LoggyService",
	HandlerType: (*LoggyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchLogs",
			Handler:    _LoggyService_SearchLogs_Handler,
		},
		{
			MethodName: "GetLogCount",
			Handler:    _LoggyService_GetLogCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _LoggyService_StreamLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/log.proto",
}
